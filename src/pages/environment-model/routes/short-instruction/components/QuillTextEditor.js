import {useContext, useEffect, useRef, useState} from "react";
import Quill from "quill";
import "quill/dist/quill.snow.css"; // –ò–º–ø–æ—Ä—Ç —Å—Ç–∏–ª–µ–π Quill
import "./QuillTextEditor.css";
import {API_URLS} from "../../../../../constants/ApiUrls";
import {getEnvironmentModelById, SaveShortInstruction} from "../../../../../services/drkb-wiki/EnvironmentModelService";
import {useParams} from "react-router-dom";
import {Button} from "@mui/material";
import {EnvironmentModelContext} from "../../../../../context/EnvironmentModelContext";


///TODO –î–æ–±–∞–≤–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ –≤–∏–¥–µ–æ –∏–∑ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π.
///–î–æ–±–∞–≤–∏—Ç—å –ø—Ä–µ–ø—Ä–æ—Å–º–æ—Ç—Ä –≤–∏–¥–µ–æ –≤ —Ä–µ–¥–∞–∫—Ç–æ—Ä–µ.
const QuillTextEditor = () => {
    const editorRef = useRef(null);
    const [value, setValue] = useState("");
    const {id} = useParams();
    const environmentModel = useContext(EnvironmentModelContext);
    useEffect(() => {
        if (editorRef.current) {
            const quill = new Quill(editorRef.current, {
                theme: "snow",
                placeholder: "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∑–¥–µ—Å—å...",
                modules: {
                    toolbar: {
                        container: [
                            [{ header: [1, 2, 3, false] }],
                            ["bold"],
                            [{ align: "" }, { align: "center" }, { align: "right" }],
                            /*[{ list: "ordered" }, { list: "bullet" }],*/
                            ["image"],
                            ["customVideo"], // –ö–∞—Å—Ç–æ–º–Ω–∞—è –∫–Ω–æ–ø–∫–∞ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∏–¥–µ–æ
                            ["clean"],
                        ],
                        handlers: {
                            customVideo: () => handleVideoUpload(quill), // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∏–¥–µ–æ
                        },
                    },
                },
            });

            const handleVideoUpload = (quill) => {
                const fileInput = document.createElement("input");
                fileInput.setAttribute("type", "file");
                fileInput.setAttribute("accept", "video/*");
                fileInput.click();

                fileInput.onchange = async () => {
                    const file = fileInput.files[0];
                    const environmentModelId = id; // ID –∏–∑ URL-–ø–∞—Ä–∞–º–µ—Ç—Ä–∞

                    if (file && environmentModelId) {
                        const formData = new FormData();
                        formData.append("createVideoDto.environmentModelId", environmentModelId);
                        formData.append("file", file); // –í–∞–∂–Ω–æ: –∏–º—è –¥–æ–ª–∂–Ω–æ —Å–æ–≤–ø–∞–¥–∞—Ç—å —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞

                        // –£–∫–∞–∑—ã–≤–∞–µ–º –∏–º—è –∫–∞–∫ "createVideoDto.environmentModelId" –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏

                        try {
                            const response = await fetch(`${API_URLS.VIDEO}/save-video`, {
                                method: "POST",
                                body: formData,
                                headers: {
                                    "Accept": "*/*",
                                    "enctype": "multipart/form-data"
                                }
                            });

                            if (response.ok) {
                                const data = await response.json();
                                const videoUrl = `${data.url}`;
                                const range = quill.getSelection(true);
                                quill.insertEmbed(range.index, "video", videoUrl);
                            } else {
                                alert("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∏–¥–µ–æ");
                            }
                        } catch (error) {
                            console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≤–∏–¥–µ–æ:", error);
                        }
                    } else {
                        alert("–ù–µ –≤—ã–±—Ä–∞–Ω —Ñ–∞–π–ª –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç ID –º–æ–¥–µ–ª–∏.");
                    }
                };
            };

            // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–∫–æ–Ω–∫–∏ –Ω–∞ –∫–∞—Å—Ç–æ–º–Ω—É—é –∫–Ω–æ–ø–∫—É
            const customButton = document.querySelector(".ql-customVideo");
            if (customButton) {
                customButton.innerHTML = "üé¨"; // –ò–∫–æ–Ω–∫–∞ –¥–ª—è –∫–Ω–æ–ø–∫–∏
                customButton.title = "–ó–∞–≥—Ä—É–∑–∏—Ç—å –≤–∏–¥–µ–æ";
            }

            quill.on("text-change", () => {
                setValue(quill.root.innerHTML);
            });

            const getCurrentShortInstruction = async (id) => {
                const response = await getEnvironmentModelById(id);
                setValue(response.shortInstruction);
                quill.root.innerHTML = response.shortInstruction;
            }

            getCurrentShortInstruction(id);
        }
    }, []);


    const sendContentOnServer = async () => {
        const response = await SaveShortInstruction(environmentModel.id,value);
        if (response.ok)
            alert('–£–î–ê–ß–ù–û');
        else
            alert("–ù–ï–£–î–ê–ß–ù–û");
    }

    return (
        <div className="editor-container">
            <h2 className="editor-title">–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é</h2>
            <div ref={editorRef} className="quill-editor" />
            <Button
                type="button"
                onClick={sendContentOnServer}
                className="editor-save-btn"
                variant="contained"
            >–°–æ—Ö—Ä–∞–Ω–∏—Ç—å
            </Button>
        </div>
    );
};

export default QuillTextEditor;


/*
<div className="preview-box">
    <h3 className="preview-title">–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä:</h3>
    <div
        className="preview-content"
        dangerouslySetInnerHTML={{ __html: value }}
    />
    <button type="button" onClick={sendContentOnServer}>–û—Ç–ø—Ä–∞–≤–∏—Ç—å</button>
</div>*/
