import {useContext, useEffect, useRef, useState} from "react";
import Quill from "quill";
import "quill/dist/quill.snow.css";
import {saveVideo} from "../../services/drkb-file-saver/videoService";
import {BlockEmbed} from "quill/blots/block"; // –ò–º–ø–æ—Ä—Ç —Å—Ç–∏–ª–µ–π Quill
/*import {saveVideo} from "../../services/drkb-wiki/VideoService";*/


///TODO –î–æ–±–∞–≤–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ –≤–∏–¥–µ–æ –∏–∑ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π.
///–î–æ–±–∞–≤–∏—Ç—å –ø—Ä–µ–ø—Ä–æ—Å–º–æ—Ç—Ä –≤–∏–¥–µ–æ –≤ —Ä–µ–¥–∞–∫—Ç–æ—Ä–µ.
const QuillTextEditor = ({value, setValue, error, setError}) => {

    /*class CustomVideo extends BlockEmbed {
        static blotName = "video";
        static tagName = "video";

        static create(value) {
            let node = super.create();
            node.setAttribute("controls", true);
            node.setAttribute("src", value);
            node.setAttribute("preload", "metadata");
            node.setAttribute("style", "max-width: 50%;");
            return node;
        }

        static value(node) {
            return node.getAttribute("src");
        }
    }

    Quill.register(CustomVideo);*/

    // –ö–∞—Å—Ç–æ–º–Ω—ã–π VideoBlot –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–∏–¥–µ–æ
    /*const BlockEmbed = Quill.import("blots/block/embed");

    class CustomVideoBlot extends BlockEmbed {
        static create(value) {
            const node = super.create();
            node.setAttribute("src", value);
            node.setAttribute("frameborder", "0");
            node.setAttribute("allowfullscreen", "");
            // –£–¥–∞–ª—è–µ–º autoplay –∏–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
            node.removeAttribute("autoplay");
            // –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞—Å—Å –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ —Å—Ç–∏–ª–µ–π Quill
            node.classList.add("ql-align-left"); // –ù–∞—á–∞–ª—å–Ω–æ–µ –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ –ø–æ –ª–µ–≤–æ–º—É –∫—Ä–∞—é
            node.style.maxWidth = "100%"; // –ß—Ç–æ–±—ã iframe –Ω–µ –≤—ã—Ö–æ–¥–∏–ª –∑–∞ –≥—Ä–∞–Ω–∏—Ü—ã
            node.style.display = "block"; // –ë–ª–æ—á–Ω–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            return node;
        }

        static formats(node) {
            // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ñ–æ—Ä–º–∞—Ç—ã, –≤–∫–ª—é—á–∞—è –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ
            const align = node.classList.contains("ql-align-center")
                ? "center"
                : node.classList.contains("ql-align-right")
                    ? "right"
                    : "left"; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –ª–µ–≤–æ–µ –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ
            return {
                src: node.getAttribute("src"),
                allowfullscreen: node.hasAttribute("allowfullscreen"),
                align: align,
            };
        }

        static value(node) {
            return node.getAttribute("src");
        }

        format(name, value) {
            // –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏—è
            if (name === "align") {
                // –£–¥–∞–ª—è–µ–º –≤—Å–µ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –∫–ª–∞—Å—Å—ã –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏—è
                this.domNode.classList.remove("ql-align-left", "ql-align-center", "ql-align-right");
                this.domNode.style.textAlign = ""; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Ç–∏–ª—å

                // –ü—Ä–∏–º–µ–Ω—è–µ–º –Ω–æ–≤–æ–µ –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ
                if (value === "center") {
                    this.domNode.classList.add("ql-align-center");
                    this.domNode.style.textAlign = "center";
                } else if (value === "right") {
                    this.domNode.classList.add("ql-align-right");
                    this.domNode.style.textAlign = "right";
                } else {
                    // –ü—É—Å—Ç–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏–ª–∏ "left" ‚Äî –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ –ø–æ –ª–µ–≤–æ–º—É –∫—Ä–∞—é
                    this.domNode.classList.add("ql-align-left");
                    this.domNode.style.textAlign = "left";
                }
            }
        }
    }
    CustomVideoBlot.blotName = "video";
    CustomVideoBlot.tagName = "iframe";
    CustomVideoBlot.className = "ql-video";
    Quill.register(CustomVideoBlot, true);
*/
    const editorRef = useRef(null);

    useEffect(() => {
        if (editorRef.current) {
            const quill = new Quill(editorRef.current, {
                theme: "snow",
                placeholder: "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∑–¥–µ—Å—å...",
                modules: {
                    toolbar: {
                        container: [
                            [{ header: [1, 2, 3, false] }],
                            ["bold"],
                            [{ align: "" }, { align: "center" }, { align: "right" }],
                            /*[{ list: "ordered" }, { list: "bullet" }],*/
                            ["image"],
                            ["customVideo"], // –ö–∞—Å—Ç–æ–º–Ω–∞—è –∫–Ω–æ–ø–∫–∞ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∏–¥–µ–æ
                            ["clean"],
                        ],
                        handlers: {
                            customVideo: () => handleVideoUpload(quill), // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∏–¥–µ–æ
                        },
                    },
                },
            });

            const handleVideoUpload = (quill) => {
                const fileInput = document.createElement("input");
                fileInput.setAttribute("type", "file");
                fileInput.setAttribute("accept", "video/*");
                fileInput.click();

                fileInput.onchange = async () => {
                    const file = fileInput.files[0];

                    if (file) {
                        const result = await saveVideo(file);
                        if (result.success) {
                            const videoUrl = `${result.data.savedVideoUrl}`;
                            const range = quill.getSelection(true);
                            quill.insertEmbed(range.index, "video", videoUrl);
                        } else {
                            setError(result.errorMessage);
                        }
                    } else {
                        setError("–ù–µ –≤—ã–±—Ä–∞–Ω —Ñ–∞–π–ª");
                    }
                };
            };

            // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–∫–æ–Ω–∫–∏ –Ω–∞ –∫–∞—Å—Ç–æ–º–Ω—É—é –∫–Ω–æ–ø–∫—É
            const customButton = document.querySelector(".ql-customVideo");
            if (customButton) {
                customButton.innerHTML = "üé¨"; // –ò–∫–æ–Ω–∫–∞ –¥–ª—è –∫–Ω–æ–ø–∫–∏
                customButton.title = "–ó–∞–≥—Ä—É–∑–∏—Ç—å –≤–∏–¥–µ–æ";
            }

            quill.on("text-change", () => {
                setValue(quill.root.innerHTML);

                const videos = quill.root.querySelectorAll("iframe");
                console.log("–ù–ê–®–ï–õ –°–¢–û–õ–¨–ö–û –¢–ï–ì–û–í –í–ò–î–ï–û ");
                console.log(videos);
                console.log(videos.length)
                videos.forEach((video) => {
                    video.removeAttribute("autoplay");
                    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –º–æ–∂–µ—à—å –∑–∞–º–µ–Ω–∏—Ç—å iframe –Ω–∞ video, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                });
            });

            quill.root.innerHTML = value;
        }
    }, [value, setError, setValue]);

    return (
        <>
            <div ref={editorRef} className="quill-editor" />
        </>
    );
};

export default QuillTextEditor;
